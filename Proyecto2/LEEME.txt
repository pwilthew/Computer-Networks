README
>Carlos Da Silva (10-10175)
>Patricia Wilthew (09-10910)

-Limitaciones: El proyecto no cuenta con limitaciones, pues realiza todo lo soli-
citado en el enunciado del mismo.

-Descripci√≥n de funcionamiento: El proyecto levanta una arquitectura cliente/servidor
en la cual existen 2 servidores: el de archivos centralizados y el de autenticaci√≥n,
as√≠ como un programa cliente. Bas√°ndonos en RMI de Java, el servidor de archivos ofrece
al cliente un objeto, y es mediante la llamada a m√©todos de dicho objeto remoto
que el cliente logra realizar las funcionalidades deseadas.
El servidor de archivos no puede brindar sus funcionalidades (o m√©todos) al menos
de que verifique que el cliente solicit√°ndolo est√© autenticado; para ello, se
tiene un servidor de autenticaci√≥n que ofrece un objeto con cuyos m√©todos se
logra realizar tal autenticaci√≥n. Entonces, como atributo del objeto "servidor de
archivos" se tiene un objeto de la clase "servidor de autenticaci√≥n" que permite
que antes de la correcta invocaci√≥n de sus m√©todos se verifique al cliente en
cuesti√≥n.

-Aspectos importantes:

  *El comando "lls" por su naturaleza local, no requiere de la utilizaci√≥n del
  objeto remoto.
  *El comando "log" del servidor, tal como se solicita, despliega en pantalla
  todas las solicitudes recibidas, sean de usuarios autenticados o no.
  *En caso de que un cliente desee subir un archivo al servidor, y en el mismo
  ya se encuentre uno de mismo nombre, se le alertar√° de esta situaci√≥n para
  que tome cartas en el asunto.
  *El comando log mostrar· los ˙ltimos requests recibidos en el siguiente formato:
  <comando>,<usuario>.
  *Si un cliente desea bajar un archivo, y localmente posee un archivo de mismo
  nombre, se sobreescribir·.

-Explicaci√≥n de archivos enviados:
  *<c_rmifs>: Programa cliente del sistema. Hace uso del objeto
  remoto ofrecido por el servidor de archivos. Ofrece un men√∫ para el usuario,
  y ejecuta los comandos del archivo pasado como par√°metros (si fuese el caso).

  *<FileManager>: Interfaz de la clase de la cual
  el servidor ofrecer√° un objeto remoto.

  *<FileManagerImpl>: Implementaci√≥n de la interfaz mencionada.

  *<s_rmifs>: Servidor de archivos centralizados. En √©l, se
  instancia un objeto de la clase mencionada previamente y se ofrece (se registra
  en el RMIregistry).

  *<Authentication>: Interfaz de la clase de la cual el
  servidor de autenticaci√≥n ofrecer√° un objeto.

  *<AuthenticationImpl>: Implementaci√≥n de la interfaz de la
  clase asociada al servidor de autenticaci√≥n.

  *<a_rmifs>: Servidor de autenticaci√≥n. Crear√° y ofrecer√° un 
  objeto de la clase asociada al servidor de archivos.

  *Makefile: para la compilaci√≥n de todos los archivos ".java".

-Compilaci√≥n/ejecuci√≥n: Se cuenta con un makefile, por lo que para obtener los .class de
todos los archivos que se encuentren en la carpeta deseada basta con realizar
"make". Para correr el sistema, basta con correr primero el servidor de autenticaci√≥n,
luego el de archivos, y por el √∫ltimo el cliente. (En donde se encuentre el cliente
tambi√©n deber√° estar la interfaz para el objeto del servidor de archivos, y en donde
se encuentre el servidor de archivos, debe encontrarse la interfaz del objeto del
servidor de autenticaci√≥n.
